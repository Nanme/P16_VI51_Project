package fr.utbm.vi51.prj.drone.ia.^behavior

import fr.utbm.vi51.prj.drone.framework.math.Point2f
import fr.utbm.vi51.prj.drone.framework.math.Vector2f
import fr.utbm.vi51.prj.drone.ia.agt.BehaviorOutput
import fr.utbm.vi51.prj.drone.ia.evt.DynamicType

class SteeringSeekBehaviour implements SeekBehaviour {

	override runSeek(position : Point2f, linearSpeed : float, maxLinear : float, target : Point2f) : BehaviorOutput {
		val direction = target - position
		direction.length = maxLinear
		return new BehaviorOutput(DynamicType.STEERING) => [
			linear = direction;
		]
	}
	
}

class SteeringAlignBehaviour implements AlignBehaviour {

	val stopAngle : float 
	val decelerateAngle : float
	val timeToReachTarget : float

	new(stopAngle : float, decelerateAngle : float, timeToReachTarget : float) {
		this.stopAngle = stopAngle
		this.decelerateAngle = decelerateAngle
		this.timeToReachTarget = timeToReachTarget
	}
	
	
	override runAlign(orientation : Vector2f, angularSpeed : float, maxAngular : float, target : Vector2f) : BehaviorOutput {
		val sAngle = orientation.signedAngle(target) // [-PI; PI]
		val angle = Math::abs(sAngle) // [0; PI]
		if (angle <= stopAngle) {
			return new BehaviorOutput(DynamicType::STEERING) => [
				angular = -angularSpeed / 1
			]
		}
		
		if (angle > decelerateAngle) {
			return new BehaviorOutput(DynamicType::STEERING) => [
				angular = Math::signum(sAngle) * maxAngular
			]
		}
		return new BehaviorOutput(DynamicType::STEERING) => [
			angular = (sAngle / (timeToReachTarget**2)) as float
		]
	}
	
}