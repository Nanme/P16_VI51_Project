/* 
 * $Id$
 * 
 * Copyright (c) 2014-15 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.vi51.prj.drone.ia.agt

import fr.utbm.vi51.prj.drone.framework.math.Point2f
import fr.utbm.vi51.prj.drone.framework.math.Vector2f
import fr.utbm.vi51.prj.environment.AgentBody
import fr.utbm.vi51.prj.environment.Perceivable
import java.util.ArrayList
import java.util.UUID

event Perception {
	val time : float
	val objects : ArrayList<Perceivable>
	val pos : Point2f
	val bodyId : UUID
	val body : AgentBody
	
	new (time : float, bodyID : UUID, objects : ArrayList<Perceivable>, pos : Point2f,body : AgentBody){
		this.time = time
		this.bodyId = bodyID
		this.objects = objects
		this.pos = pos
		this.body = body
	}
}

/**
 * Agent emit an influence (2 kinds of influence)
 */
event Influence {
	val time : float
	val vector : Vector2f
	
	new (time : float, vector : Vector2f){
		this.time = time
		this.vector = vector
	} 
}
event MotionInfluence extends Influence{ 
	val angular : float
	new (time : float, vector : Vector2f, angular : float){
		super(time,vector)
		this.angular = angular 
	}
}

event ShootInfluence extends Influence{
	
	new (time : float, vector : Vector2f){
		super(time,vector)
	}
}

event agentReady

event KillAgent

event RunEndOfStep

event RunBeginingOfStep

event EndOfGame