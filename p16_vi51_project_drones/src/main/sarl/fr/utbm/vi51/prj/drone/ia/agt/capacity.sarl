
package fr.utbm.vi51.prj.drone.ia.agt

import fr.utbm.vi51.prj.drone.framework.math.Vector2f
import fr.utbm.vi51.prj.environment.AgentBody
import fr.utbm.vi51.prj.utils.tree.Tree
import java.util.List
import java.util.UUID

capacity MapManager {
	/** Replies the number of bodies in the map */
	def getBodyCount : int
	
	/** execute the list of influences 
	 * 	@return true if game is over? *TBD* */
	def resolveInfluences (actions : List<BehaviorOutput>) : boolean
	
	/** replies the perceptions */
	def sendPerceptions (time : float)
	
	/** replies the width of the map. */
	def getMapWidth : float
	
	/** replies the height of the map. */
	def getMapHeight : float
	
	/** replies all the objects */
	def getAllObjects : Tree
	
	/** Replies a specific body */
	def getAgentBody(id : UUID) : AgentBody
	
	/** Create basic Unit */
	def createUnit(perceptionDistance : float, team : int) : AgentBody
	
	/** Create the map surroundings walls */
	def createMapSurroundings
	
	def createWindow
	
	def updateTree
	
	def RunJbox
	
	def updateWindow
	
	def printTree

	def SpawnButtonRequestA : boolean
	
	def SpawnButtonRequestB : boolean
	
}

capacity PhysicEnvironment {

	/** Invoked to send the influence to the environment.
	 * 
	 * @param linearInfluence is the linear influence to apply on the object.
	 * @param angularInfluence is the angular influence to apply on the object.
	 * @param otherInfluences other influences to emit in parallel to the motion influence.
	 */
	def influenceSteering(time : float = 0f,linearInfluence : Vector2f = null, angularInfluence : float = 0f, otherInfluences : Influence* )

}