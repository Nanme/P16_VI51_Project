/**
 * 
 */
package fr.utbm.vi51.prj.drone.ia.agt

import fr.utbm.vi51.prj.drone.DroneDisplay
import fr.utbm.vi51.prj.drone.framework.math.MathUtil
import fr.utbm.vi51.prj.drone.framework.math.Point2f
import fr.utbm.vi51.prj.drone.ia.^behavior.SeekBehaviour
import fr.utbm.vi51.prj.drone.ia.^behavior.SteeringSeekBehaviour
import fr.utbm.vi51.prj.drone.ia.evt.DynamicType
import fr.utbm.vi51.prj.drone.ia.evt.PerceptionEvent
import fr.utbm.vi51.prj.drone.ia.evt.SimulationAgentReady
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle

/**
 * @author Lana Banana
 *
 */
agent drone extends AbstractOVNI{
	
		uses PhysicEnvironment, Lifecycle, DefaultContextInteractions
	
	var seekBehaviour : SeekBehaviour
	
	var dispDrone : DroneDisplay
	
	val STOP_RADIUS = MathUtil.PI/10f
	val SLOW_RADIUS = MathUtil.PI/4f
	val WANDER_CIRCLE_DISTANCE = 20f
	val WANDER_CIRCLE_RADIUS = 10f
	val WANDER_MAX_ROTATION = MathUtil.PI/4f
	
	on Initialize {
		super._handle_Initialize_0(occurrence)
		if (this.behaviorType == DynamicType::STEERING) {
			this.seekBehaviour = new SteeringSeekBehaviour
		} 
		emit(new SimulationAgentReady)
	}
	
	on PerceptionEvent {
		//FIXME: See the inherited functions for helping you to write the code
		//var mouseTarget = occurrence.perceptions.findFirst[ it.type == "TARGET" ];
		var target = new Point2f(15,15)
		//if(mouseTarget !== null)
		//{
		var o = this.seekBehaviour.runSeek(
			occurrence.body.position,
			occurrence.body.currentLinearMotion.length,
			occurrence.body.maxLinearAcceleration,
			target)
			o.emitInfluence		
			
		//}
	}
}