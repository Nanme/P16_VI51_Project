package fr.utbm.vi51.prj.drone.ia.formation

import fr.utbm.vi51.prj.drone.framework.math.Vector2f

interface FormationFactory {

	def build(nbAnchors : int) : Formation

}

class CircleFormationFactory implements FormationFactory {
	
	val bodySizeOnPerimeter : float
	
	new(bodySizeOnPerimeter : float) {
		//TODO: Write this function
		this.bodySizeOnPerimeter = bodySizeOnPerimeter
	}
	
	override build(nbAnchors : int) : Formation 
	{
		//TODO: Write this function
		var anchor = new Anchor(new Vector2f(0,0), 0)
		var f = new Formation(anchor)
		
		var arc = (2*Math::PI) / nbAnchors
		var radius = this.bodySizeOnPerimeter/ arc
		
		for(i : 1..nbAnchors)
		{
			var angle = ((2*Math::PI/nbAnchors)*(i-0.5)) as float
			var v = new Vector2f(radius, 0)
			v.turn(angle)
			var a = new Anchor(v, angle)
			anchor.addChildAnchor(a)
		}
		return f
	}
	
}


