/**
 * 
 */
package fr.utbm.vi51.prj.drone.ia.agt

/**
 * @author Lana Banana
 *
 */

import fr.utbm.vi51.prj.drone.framework.math.Vector2f
import fr.utbm.vi51.prj.drone.ia.evt.DynamicType
import fr.utbm.vi51.prj.drone.ia.evt.Perception
import fr.utbm.vi51.prj.drone.ia.evt.StopSimulation
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.UUID

agent AbstractOVNI {
	
	uses PhysicEnvironment, Lifecycle
	
	var behaviorType : DynamicType
	
	on Initialize {
		var physicSkill = new StandardPhysicEnvironment(
			occurrence.parameters.get(0) as UUID,
			occurrence.parameters.get(1) as UUID)
		this.behaviorType = occurrence.parameters.get(2) as DynamicType
		setSkill(PhysicEnvironment, physicSkill)
	}
	
	def getMaxLinear(p : Perception) : float {
		if (this.behaviorType == DynamicType::STEERING) p.maxLinearAcceleration
	}
	
	def getMaxAngular(p : Perception) : float {
		if (this.behaviorType == DynamicType::STEERING) p.maxAngularAcceleration
	}

	def emitInfluence(output : BehaviorOutput) {
		if (output !== null) {
			if (output.getType() === DynamicType::STEERING)
				influenceSteering(output.linear, output.angular)
		}
	}
	
	def doNothing {
		influenceSteering(new Vector2f, 0f)
	}

	on StopSimulation {
		killMe
	}

}